{"ts":1342003477921,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"'''\r\nCreated on Jun 15, 2012\r\n\r\n@author: qliu040\r\n'''\r\n\r\nfrom google.appengine.ext import db\r\nfrom django.http import HttpResponse\r\nfrom datetime import date\r\nfrom datetime import timedelta\r\nimport math\r\nfrom datetime import datetime\r\n   \r\n\r\nclass Room(db.Model):\r\n    #tenant = db.ReferenceProperty(required = False)\r\n    #tenant = db.ReferenceProperty()#test\r\n    #rentalContract = db.ReferenceProperty()\r\n    roomNumber = db.StringProperty(required = False)    \r\n    area = db.FloatProperty()\r\n    rentSingle = db.FloatProperty()\r\n    rentDouble = db.FloatProperty()\r\n    \r\n    def hasVacancy(self):\r\n        rooms = Room.all()\r\n        for room in rooms:\r\n            if room.isNotOccupied():\r\n                    return True\r\n        return False\r\n    \r\n    def isUnoccupied(self):\r\n        rc = RentalContract()\r\n        contracts = rc.getValidRentalContracts()\r\n        for con in contracts:\r\n            if self.key()== con.room.key():\r\n                return False\r\n        return True\r\n    \r\n    def getVacantRooms(self):\r\n        rooms = Room.all()\r\n        vacant_rooms_list = []\r\n        rc = RentalContract()\r\n        validContracts = rc.getValidRentalContracts()  \r\n        for room in rooms:\r\n            for con in validContracts :\r\n                if room.key() == con.room.key():\r\n                    break\r\n            else:\r\n                #continue   \r\n                vacant_rooms_list.append(room)\r\n        return vacant_rooms_list\r\n        \r\n    def getRoomsProfile(self,rooms):\r\n        rooms_data_list = []\r\n        for room in rooms:\r\n            rooms_data_list.append({'roomKey':str(room.key()),'roomNumber':room.roomNumber,'area':room.area,'rentSingle':room.rentSingle,'rentDouble':room.rentDouble})\r\n        return rooms_data_list     \r\n      \r\nclass Tenant(db.Model):\r\n    #rentalContract = db.ReferenceProperty()\r\n    firstName = db.StringProperty()\r\n    surname = db.StringProperty()\r\n    gender = db.StringProperty()\r\n    age = db.IntegerProperty(default = 20)\r\n    phoneNumber = db.PhoneNumberProperty()\r\n    contactName = db.StringProperty()\r\n    contactPhoneNumber = db.PhoneNumberProperty()\r\n    email = db.EmailProperty()  \r\n    registerDate = db.DateProperty(auto_now_add = True)  \r\n    \r\n    def getAllTenants(self):\r\n        tenants = db.GqlQuery(\"SELECT * \"\r\n                      \"FROM Tenant\")\r\n        return tenants\r\n    def registerTenant(self,data):\r\n        tenant = Tenant(key_name = data['firstName'] + data['surname'] + data['registerDate'])         \r\n        #tenant = Tenant(key_name = self.request.get('firstName')+'_' + self.request.get('surname'))      \r\n        tenant.firstName = data['firstName']\r\n        tenant.surname = data['surname']\r\n        tenant.gender = data['gender']\r\n        tenant.age = int(data['age'])\r\n        tenant.phoneNumber = data['phoneNumber']\r\n        tenant.email = data['email']\r\n        tenant.contactName = data['contactName']\r\n        tenant.contactPhoneNumber = data['contactPhoneNumber']\r\n        #tenant.registerDate = data['registerDate']\r\n        registerDate = datetime.strptime(data['registerDate'],\"%Y-%m-%d\")\r\n        tenant.registerDate = registerDate.date()    \r\n        tenant.put()\r\n        return tenant\r\n    \r\n    def getTenantProfile(self):\r\n        tenants = db.GqlQuery(\"SELECT * \"\r\n                      \"FROM Tenant\")\r\n        data_list = []\r\n        for tenant in tenants:\r\n            if tenant.key()== self.key():\r\n                data_list.append({'firstName':tenant.firstName,'surname':tenant.surname,'gender':tenant.gender,'age':tenant.age,'phoneNumber':tenant.phoneNumber,'email':tenant.email,'contactName':tenant.contactName,'contactPhoneNumber':tenant.contactPhoneNumber,'registerDate': tenant.registerDate.isoformat()})          \r\n        return data_list\r\n    \r\n    def getCurrentTenants(self):\r\n        tenants = db.GqlQuery(\"SELECT * \"\r\n                              \"FROM Tenant\")\r\n        currentTenants = []\r\n        for tenant in tenants:\r\n            currentTenants.append(tenant)              \r\n        return currentTenants  \r\n    def hasCheckedIn(self):\r\n        rc = RentalContract()\r\n        contracts = rc.getValidRentalContracts()\r\n        for con in contracts:\r\n            if self.key()== con.tenant.key():\r\n                return True\r\n        return False\r\n    \r\nclass RentalContract(db.Model):\r\n    tenant = db.ReferenceProperty(Tenant)\r\n    room = db.ReferenceProperty(Room)\r\n    \r\n    startDate = db.DateProperty()\r\n    payPeriod = db.IntegerProperty(default = 1)\r\n    \r\n    #endDate = db.DateProperty()\r\n    rent = db.FloatProperty()\r\n    #bond = db.FloatProperty()\r\n    checkOutDate = db.DateProperty()\r\n    isValid = db.BooleanProperty()\r\n    \r\n    def getRentRate(self):\r\n        return round(self.rent/7.0,1)\r\n    \r\n    def getBond(self):\r\n        return round(self.rent * 2)\r\n    \r\n    def getValidRentalContracts(self):\r\n        contracts = db.GqlQuery(\"SELECT * \"\r\n                      \"FROM RentalContract \"  #need space between the statement and the question mark\r\n                      \"WHERE isValid = :1 ORDER BY startDate\",True )  \r\n        return contracts\r\n    \r\n    def getInvalidRentalContracts(self):\r\n        contracts = db.GqlQuery(\"SELECT * \"\r\n                      \"FROM RentalContract \"    #need space between the statement and the question mark\r\n                      \"WHERE isValid = :1 ORDER BY checkOutDate\",False )\r\n        return contracts\r\n    \r\n    def createRentalContract(self,data):\r\n        self.tenant = Tenant.get(data['tenantKey'])    \r\n        self.room = Room.get(data['room_key'])\r\n        self.rent = float(data['actualRent'])                                  \r\n        self.payPeriod = int(data['payPeriod'])       \r\n        startDate = datetime.strptime(data['startDate'],\"%Y-%m-%d\")\r\n        self.startDate = startDate.date()\r\n        #self.rentExpiredDate = startDate.date()\r\n        self.isValid = True\r\n        self.put()\r\n    \r\nclass Payment(db.Model):\r\n    contract = db.ReferenceProperty(RentalContract)\r\n    #rentActual = db.FloatProperty()\r\n    totalPaidAmount = db.FloatProperty()\r\n    rentExpiredDate = db.DateProperty()\r\n    \r\n    def initializePayment(self, contract):\r\n        self.contract = contract\r\n        self.rentExpiredDate = self.contract.startDate\r\n        self.totalPaidAmount = 0.0\r\n        self.put()\r\n        \r\n    def getLastPayDate(self):       \r\n        transactions = db.GqlQuery(\"SELECT * \"\r\n                    \"FROM Transaction\")\r\n        payDates = []\r\n        if transactions:\r\n            for transaction in transactions:    \r\n                    if transaction.payment.key().name() == self.key().name():\r\n                        payDates.append(transaction.transactionDate)\r\n        if not payDates:\r\n            return None\r\n        else:\r\n            return max(payDates)\r\n    \r\nclass Transaction(db.Model):\r\n    payment = db.ReferenceProperty(Payment, required = True)\r\n    paidAmount = db.FloatProperty()\r\n    transactionDate = db.DateProperty()\r\n    \r\n    def getAllTransactions(self):\r\n        transactions = db.GqlQuery(\"SELECT * \"\r\n                      \"FROM Transaction\")\r\n    \r\n    def payRentNow(self):\r\n        pass\r\n        "]],"start1":0,"start2":0,"length1":0,"length2":7169}]],"length":7169}
{"contributors":[],"silentsave":false,"ts":1342003513317,"patch":[[{"diffs":[[0,"):\r\n"],[-1,"    #tenant = db.ReferenceProperty(required = False)\r\n    #tenant = db.ReferenceProperty()#test\r\n    #rentalContract = db.ReferenceProperty()\r\n"],[0,"    "]],"start1":261,"start2":261,"length1":151,"length2":8}]],"length":7026,"saved":false}
